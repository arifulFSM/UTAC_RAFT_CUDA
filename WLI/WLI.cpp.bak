// WLI.cpp : Defines the class behaviors for the application.
//

#include "pch.h"
#include "framework.h"
#include "afxwinappex.h"
#include "afxdialogex.h"

#include "WLI.h"
#include "MainFrm.h"
#include "SRC/sinstance.h"

#include "WLIDoc.h"
#include "WLIView.h"

#include <pylon/PylonIncludes.h>
#include <pylon/Platform.h>

#ifdef _DEBUG
#define new DEBUG_NEW
#endif

// CWLIApp

BEGIN_MESSAGE_MAP(CWLIApp, CWinApp)
	ON_COMMAND(ID_APP_ABOUT, &CWLIApp::OnAppAbout)
	// Standard file based document commands
	ON_COMMAND(ID_FILE_NEW, &CWinApp::OnFileNew)
	ON_COMMAND(ID_FILE_OPEN, &CWinApp::OnFileOpen)
END_MESSAGE_MAP()

// CWLIApp construction

CWLIApp::CWLIApp() noexcept {
	// support Restart Manager
	m_dwRestartManagerSupportFlags = AFX_RESTART_MANAGER_SUPPORT_ALL_ASPECTS;
#ifdef _MANAGED
	// If the application is built using Common Language Runtime support (/clr):
	//     1) This additional setting is needed for Restart Manager support to work properly.
	//     2) In your project, you must add a reference to System.Windows.Forms in order to build.
	System::Windows::Forms::Application::SetUnhandledExceptionMode(System::Windows::Forms::UnhandledExceptionMode::ThrowException);
#endif

	// TODO: replace application ID string below with unique ID string; recommended
	// format for string is CompanyName.ProductName.SubProduct.VersionInformation
	SetAppID(_T("FrontierSemi"));

	// TODO: add construction code here,
	// Place all significant initialization in InitInstance
}

// The one and only CWLIApp object

CWLIApp theApp;

// CWLIApp initialization

void Dispatch(HWND hw) {
	MSG msg;

	while (PeekMessage(&msg, hw, 0, 0xFFFF, PM_REMOVE)) {
		TranslateMessage(&msg);
		DispatchMessage(&msg);
	};
};

void Delay(HWND hw, int ms) {
	__int64 l, l1;

	l = GetTickCount64();
	do {
		Dispatch(hw);
		l1 = GetTickCount64() - l;
	} while (l1 < ms);
};

BOOL CWLIApp::InitInstance() {
	// InitCommonControlsEx() is required on Windows XP if an application
	// manifest specifies use of ComCtl32.dll version 6 or later to enable
	// visual styles.  Otherwise, any window creation will fail.
	INITCOMMONCONTROLSEX InitCtrls;
	InitCtrls.dwSize = sizeof(InitCtrls);
	// Set this to include all the common control classes you want to use
	// in your application.
	InitCtrls.dwICC = ICC_WIN95_CLASSES;
	InitCommonControlsEx(&InitCtrls);

	CWinApp::InitInstance();

	// Initialize OLE libraries
	if (!AfxOleInit()) {
		AfxMessageBox(IDP_OLE_INIT_FAILED);
		return FALSE;
	}

	AfxEnableControlContainer();

	EnableTaskbarInteraction(FALSE);

	// AfxInitRichEdit2() is required to use RichEdit control
	// AfxInitRichEdit2();

	// Standard initialization
	// If you are not using these features and wish to reduce the size
	// of your final executable, you should remove from the following
	// the specific initialization routines you do not need
	// Change the registry key under which our settings are stored
	// TODO: You should modify this string to be something appropriate
	// such as the name of your company or organization
	//SetRegistryKey(_T("WLI-FSM"));

	// Register the application's document templates.  Document templates
	//  serve as the connection between documents, frame windows and views
	CSingleDocTemplate* pDocTemplate;
	pDocTemplate = new CSingleDocTemplate(
		IDR_MAINFRAME,
		RUNTIME_CLASS(CWLIDoc),
		RUNTIME_CLASS(CMainFrame),       // main SDI frame window
		RUNTIME_CLASS(CWLIView));
	if (!pDocTemplate)
		return FALSE;
	AddDocTemplate(pDocTemplate);

	// Parse command line for standard shell commands, DDE, file open
	CCommandLineInfo cmdInfo;
	ParseCommandLine(cmdInfo);

	// Enable DDE Execute open
	EnableShellOpen();
	RegisterShellFileTypes(TRUE);

	// Pylon
	Pylon::PylonInitialize();
	{
		Pylon::DeviceInfoList_t devices;

		try {
			// Get the transport layer factory.
			Pylon::CTlFactory& TlFactory = Pylon::CTlFactory::GetInstance();

			Delay(HWND_BROADCAST, 200);
			devices.clear();
			TlFactory.EnumerateDevices(devices);
			if (devices.size() == 0) {
				Delay(HWND_BROADCAST, 5000);
				TlFactory.EnumerateDevices(devices);
			}
		}
		catch (const Pylon::GenericException& e) {
			UNUSED(e);
			devices.clear();

			TRACE(CUtf82W(e.what()));
		}
		int size = (int)devices.size(); //12222022 No Devi
	}

	// Dispatch commands specified on the command line.  Will return FALSE if
	// app was launched with /RegServer, /Register, /Unregserver or /Unregister.
	if (!ProcessShellCommand(cmdInfo)) return FALSE;

	// The one and only window has been initialized, so show and update it
	WINDOWPLACEMENT sWP;
	if (InstanceChecker.LoadState(&sWP) != ERROR_SUCCESS)
		m_pMainWnd->ShowWindow(SW_SHOW);
	else
		m_pMainWnd->SetWindowPlacement(&sWP);
	m_pMainWnd->UpdateWindow();
	// call DragAcceptFiles only if there's a suffix
	//  In an SDI app, this should occur after ProcessShellCommand
	// Enable drag/drop open
	m_pMainWnd->DragAcceptFiles();
	return TRUE;
}

int CWLIApp::ExitInstance() {
	// Pylon
	Pylon::PylonTerminate();

	AfxOleTerm(FALSE);

	return CWinApp::ExitInstance();
}

// CWLIApp message handlers

// CAboutDlg dialog used for App About

class CAboutDlg : public CDialogEx {
public:
	CAboutDlg() noexcept;

	// Dialog Data
#ifdef AFX_DESIGN_TIME
	enum { IDD = IDD_ABOUTBOX };
#endif

protected:
	virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV support

	// Implementation
protected:
	DECLARE_MESSAGE_MAP()
};

CAboutDlg::CAboutDlg() noexcept : CDialogEx(IDD_ABOUTBOX) {}

void CAboutDlg::DoDataExchange(CDataExchange* pDX) {
	CDialogEx::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(CAboutDlg, CDialogEx)
END_MESSAGE_MAP()

// App command to run the dialog
void CWLIApp::OnAppAbout() {
	CAboutDlg aboutDlg;
	aboutDlg.DoModal();
}